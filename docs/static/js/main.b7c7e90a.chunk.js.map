{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAMC,iBACHJ,EAAWK,SACZP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAoBM,OACtCL,EAAc,MAKhB,SACE,uBACEM,KAAK,OACLC,YAAY,4BACZC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAMQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAadM,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAClC,OACE,yBAAQc,UAAU,4CAAlB,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,qCAAaA,QCFNO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEvB,ECH0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAChB,GACLiB,YAAW,WACTH,EAAS,CACPf,KAAMC,EACNY,SAAS,MAEV,UAEN,CAACpB,IAIGqB,EDjBuBK,CAAa1B,GAA9BQ,EAAb,EAAOD,KAAYa,EAAnB,EAAmBA,QAEnB,OACE,qCACE,oBAAIJ,UAAU,sCAAd,SAAqDhB,IACrD,sBAAKgB,UAAU,YAAf,UAEII,GAAW,mBAAGJ,UAAU,mCAAb,wBAIXR,EAAKC,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEMA,GADCA,EAAIC,cEfVgB,EAAe,WAE1B,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEE2C,EAAWnB,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAEEA,SAAUA,GADLA,YCPF6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCEdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b7c7e90a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { PropTypes } from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if(inputValue.trim()) {\r\n      setCategories(cats => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input \r\n        type=\"text\"\r\n        placeholder=\"What are you looking for?\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=aRNOXMvZ04BO8Uq30flBTID4fH8NOPRv`;\r\n  const resp = await fetch(url);\r\n  const {data} = await resp.json();\r\n\r\n  const gifs = data.map((gif) => {\r\n    return {\r\n      id: gif.id,\r\n      title: gif.title,\r\n      url: gif.images?.downsized_medium.url,\r\n    }\r\n  });\r\n  \r\n  return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n  return (\r\n    <figure className=\" card animate__animated animate__fadeInUp\">\r\n      <img src={url} alt={title} />\r\n      <figcaption>{title}</figcaption>\r\n    </figure>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n  const {data: gifs, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeInUp\">{category}</h3>\r\n      <div className=\"card-grid\">\r\n        {\r\n          loading && <p className=\"animate__animated animate__flash\">Loading...</p>\r\n        }\r\n\r\n        {\r\n          gifs.map((gif) => (\r\n            <GifGridItem \r\n              key={gif.id} \r\n              {...gif} \r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then((gifs) => {\r\n        setTimeout(() => {\r\n          setState({\r\n            data: gifs,\r\n            loading: false,\r\n          })\r\n        }, 3000);\r\n      })\r\n  }, [category]);\r\n\r\n\r\n\r\n  return state;\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <hr />\r\n\r\n\r\n      <ol>\r\n      {\r\n        categories.map((category) => (\r\n          <GifGrid \r\n            key={category}\r\n            category={category} \r\n          />\r\n        ))\r\n      }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.scss';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}